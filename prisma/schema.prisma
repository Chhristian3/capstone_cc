datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum RatingValue {
  VeryDissatisfied
  Dissatisfied
  Neutral
  Satisfied
  VerySatisfied
}

enum AppointmentStatus {
  PENDING
  SCHEDULED
  COMPLETED
  CANCELLED
}

model Appointment {
  id             String     @id @default(cuid())
  userId         String
  title          String    
  customerName   String
  appointmentDate DateTime
  appointmentEndDate DateTime
  expirationDate DateTime
  serviceTypeId  String     @map(name: "service_type_id")
  description    String?
  status        AppointmentStatus @default(PENDING)
  rating         Rating?    
  createdAt      DateTime   @default(now()) @map(name: "created_at")
  updatedAt      DateTime   @updatedAt @map(name: "updated_at")

  serviceType    ServiceType @relation(fields: [serviceTypeId], references: [id])

  @@map(name: "appointments")
}


model ServiceType {
  id          String       @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime     @default(now()) @map(name: "created_at")
  updatedAt   DateTime     @updatedAt @map(name: "updated_at")

  appointments Appointment[]

  @@map(name: "service_types")
}

model Rating {
  id            String     @id @default(cuid())
  appointmentId String     @unique @map(name: "appointment_id")
  appointment   Appointment @relation(fields: [appointmentId], references: [id]) // Owns the relationship
  ratingValue   RatingValue
  comment       String?
  createdAt     DateTime   @default(now()) @map(name: "created_at")
  updatedAt     DateTime   @updatedAt @map(name: "updated_at")

  @@map(name: "ratings")
}

enum NotificationType {
  APPOINTMENT
  CLIENT_ANNOUNCEMENT
}

enum NotificationRecipientType {
  ALL_USERS
  ADMIN_ONLY
  CLIENT_ONLY
  SPECIFIC_USER
}

model Notification {
  id              String            @id @default(cuid())
  userId          String?           // Optional - only used when recipientType is SPECIFIC_USER
  recipientType   NotificationRecipientType @default(SPECIFIC_USER)
  type            NotificationType
  title           String            // e.g., "Appointment Status Updated" or "Important Announcement"
  content         String            // The actual message content
  referenceId     String?           @map(name: "reference_id")  // Optional ID for related entity
  isRead          Boolean           @default(false) @map(name: "is_read")
  createdAt       DateTime          @default(now()) @map(name: "created_at")
  updatedAt       DateTime          @updatedAt @map(name: "updated_at")

  @@map(name: "notifications")
}
